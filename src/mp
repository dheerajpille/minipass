#!/bin/bash

#ENC=$(gpg --encrypt --default-recipient-self $PWD/samplefile.txt)
#DEC=$(gpg --output samplefile.txt --decrypt $PWD/samplefile.txt.gpg)

PROGRAM="${0##*/}"
COMMAND=$1

# Creates initial password system file directory
cmd_init() {
	if [ "$#" -gt 0 ] 
	then
		cmd_err "Too many arguments."
	elif [ -d "$HOME"/.minipass/ ]
	then
		cmd_err "Password system exists for" "$USER"
	else
		mkdir $HOME/.minipass/
		cmd_msg "Password system created for" "$USER"
	fi
}

# Inserts password for specified domain to password system
cmd_ins() {
	if [ -d "$HOME"/.minipass/ ]
	then
		if [ "$#" -eq 1 ]
		then
			if [ ! -d "$HOME"/.minipass/"$1"/ ]
			then
				mkdir "$HOME"/.minipass/"$1"/
			fi
			printf "Username: "
			read -r USERNAME
			if [ -f "$HOME"/.minipass/"$1"/"$USERNAME".gpg ]
			then 
				cmd_err "Username exists for domain" "$1"
			else
				printf "Password: "
				read -r PASSWORD
				echo -n "$PASSWORD" > "$HOME"/.minipass/"$1"/"$USERNAME"
				gpg --encrypt --default-recipient-self "$HOME"/.minipass/"$1"/"$USERNAME"
				rm "$HOME"/.minipass/"$1"/"$USERNAME"
			fi 
		else
			cmd_err "Incorrect number of arguments"
		fi
	else
		cmd_err "Password system nonexistant for" "$USER" 
	fi
}

cmd_show() {
	if [ "$#" -eq 1 ] 
	then
		echo "$HOME"/.minipass/"$@".gpg
		if [ -f "$HOME"/.minipass/"$@".gpg ] 
		then
			gpg --output $1 --decrypt "$@".gpg
		else
			cmd_err "Password nonexistant for domain and username"
		fi
	else
		cmd_err "Incorrect number of arguments"
	fi
}

# Displays messages from program
cmd_msg() {
	echo "$@"
}

# Catches/displays error messages from program
cmd_err() {
	echo "Error:" "$@"
}

case $1 in
	init )	shift; cmd_init  "$@" 				 ;;
	ins)    shift; cmd_ins "$@" ;;
	show)   shift; cmd_show "$@" ;;
	*)    	shift; cmd_err "Unknown command."  ;;
esac

exit 0