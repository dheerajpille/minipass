#!/bin/bash

#ENC=$(gpg --encrypt --default-recipient-self $PWD/samplefile.txt)
#DEC=$(gpg --output samplefile.txt --decrypt $PWD/samplefile.txt.gpg)

#PROGRAM="${0##*/}"
#COMMAND=$1

# Add options later

# Creates initial password system file directory
cmd_init() {
	if [ "$#" -gt 0 ] 
	then
		cmd_err "Too many arguments."
	elif [ -d "$HOME"/.minipass/ ]
	then
		cmd_err "Password system exists for" "$USER"
	else
		mkdir $HOME/.minipass/
		cmd_msg "Password syst.em created for" "$USER"
	fi
}

# Inserts password for specified domain to password system
cmd_ins() {
	if [ -d "$HOME"/.minipass/ ]
	then
		# Check for empty values in username/password
		if [ "$#" -eq 1 ]
		then
			if [ ! -d "$HOME"/.minipass/"$1"/ ]
			then
				mkdir "$HOME"/.minipass/"$1"/
			fi
			printf "Username: "
			read -r USERNAME
			if [ -f "$HOME"/.minipass/"$1"/"$USERNAME".gpg ]
			then 
				cmd_err "Username exists for domain" "$1"
			else
				printf "Password: "
				read -r PASSWORD
				echo -n "$PASSWORD" > "$HOME"/.minipass/"$1"/"$USERNAME"
				gpg --encrypt --default-recipient-self "$HOME"/.minipass/"$1"/"$USERNAME"
				rm "$HOME"/.minipass/"$1"/"$USERNAME"
			fi 
		else
			cmd_err "Incorrect number of arguments"
		fi
	else
		cmd_err "Password system nonexistant for" "$USER" 
	fi
}

#  
cmd_show() {
	if [ "$#" -eq 2 ] 
	then
		if [ -f "$HOME"/.minipass/"$1"/"$2".gpg ] 
		then
			# try to bypass passphrase prompt
			gpg -q --output "$HOME"/.minipass/"$1"/"$2" --decrypt "$HOME"/.minipass/"$1"/"$2".gpg
			cat "$HOME"/.minipass/"$1"/"$2" ; echo ''
			rm "$HOME"/.minipass/"$1"/"$2"
		else
			cmd_err "Password nonexistant for domain and username"
		fi
	else
		cmd_err "Incorrect number of arguments"
	fi
}

# Generates random password
cmd_gen() {
	# add alphanumeric flag
	# check for 1 of of cap/low/digit/spec each in random position
	local num_regex='^[0-9]+$'
	local upper=false
	local lower=false
	local number=false
	local special=false
	if [ "$#" -eq 1 ]
	then
		if [[ "$1" =~ "$num_regex" && "$1" -ge 4 ]]
		then
			while true
			do
				local gen_pwd="$(head /dev/urandom | tr -dc a-zA-Z0-9\!\"\#\$\%\&\'\(\)\*\+\,\-\.\/\:\;\<\=\>\?\@\[\\\]\^\_\`\{\|\}\~ | head -c $1 ; echo '')"
				if [ "$gen_pwd" = *'[a-z]'* ]
				then
					lower=true
				else
					lower=false
				fi
				if [ "$gen_pwd" = *'[A-Z]'* ]
				then
					upper=true
				else
					upper=false
				fi
				if [ "$gen_pwd" = *'[0-9]'* ]
				then
					number=true
				else
					number=false
				fi
				# make special check a case maybe
				# remove else and add another if statement to reset at end
				if [ "$gen_pwd" = *'[a-z]'* ]
				then
					special=true
				else
					special=false
				fi

			done
		else
			cmd_err "Expected valid numerical argument greater than or equal to 4"
		fi
	else
		echo "$1"
		cmd_err "Incorrect number of arguments"
	fi
}

# Displays messages from program
cmd_msg() {
	echo "$@"
}

# Catches/displays error messages from program
cmd_err() {
	echo "Error:" "$@"
}

case $1 in
	init     | initialize )	shift; cmd_init  "$@" 				 ;;
	ins      | insert)    shift; cmd_ins "$@" ;;
	show)   shift; cmd_show "$@" ;;
	gen | generate) shift; cmd_gen "$@" ;;
	*)    	shift; cmd_err "Unknown command"  ;;
esac

exit 0